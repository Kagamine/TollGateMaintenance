@route "/Report/Preview/{id:Guid}"
@model Report
@inject TollGateMaintenance.Models.TgmContext DB
@functions {
    public Guid id { get; set; }

    public IActionResult OnGet()
    {
        CheckRole();

        var report = DB.Reports.Single(x => x.Id == id);
        ViewBag.Title = report.Management + report.TollGate;

        var solved = report.Issues.Object
            .Where(x => x.IsSolved)
            .GroupBy(x => x.Name)
            .Select(x => new { Name = x.Key, Count = x.Count() });
        ViewBag.SolvedStatistics = Newtonsoft.Json.JsonConvert.SerializeObject(new { labels = solved.Select(x => x.Name), series = solved.Select(x => x.Count) });

        var unsolved = report.Issues.Object
            .Where(x => !x.IsSolved)
            .GroupBy(x => x.Name)
            .Select(x => new { Name = x.Key, Count = x.Count() });
        ViewBag.UnsolvedStatistics = Newtonsoft.Json.JsonConvert.SerializeObject(new { labels = unsolved.Select(x => x.Name), series = unsolved.Select(x => x.Count) });

        var issues = report.Issues.Object
            .GroupBy(x => x.Name)
            .Select(x => new { Name = x.Key, UnsolvedCount = x.Where(y => !y.IsSolved).Count(), Count = x.Count() });
        ViewBag.GeneralStatistics = Newtonsoft.Json.JsonConvert.SerializeObject(new { labels = issues.Select(x => x.Name), series = new[] { issues.Select(x => x.Count), issues.Select(x => x.UnsolvedCount) } });

        return View(report);
    }
}

<style>
    .content h4 {
            margin-top: 20px;
        }
</style>
<script src="/js/chartist.min.js"></script>

<div class="card">
    <div class="header">
        <h4 class="title">@ViewBag.Title</h4>
        <p class="category">本页中展示了该站已解决、未解决问题</p>
    </div>
    <div class="content">
        <div class="row" style="border-top: 1px solid #ccc">
            <div class="col-md-6">
                <h4>故障设备一览表</h4>
                <table class="table">
                    <thead>
                        <tr>
                            <th>设备名称</th>
                            <th>车道/位置</th>
                            <th>维修前</th>
                            <th>备注</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var x in Model.Issues.Object)
                        {
                            <tr>
                                <td>@x.Name</td>
                                <td>@x.Lane</td>
                                <td>@x.Phenomenon</td>
                                <td>@x.Solution</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="col-md-6">
                <h4>维护汇总表</h4>
                <table class="table">
                    <colgroup>
                        <col />
                        <col />
                        <col />
                        <col />
                        <col style="width: 40%" />
                    </colgroup>
                    <thead>
                        <tr>
                            <th>设备名称</th>
                            <th>维修前故障设备</th>
                            <th>维修后故障设备</th>
                            <th>维修后修复设备</th>
                            <th>备注</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var x in Model.Issues.Object.GroupBy(y => y.Name))
                        {
                            var tmp = x.Select(y => y.Phenomenon + "，" + y.Solution).Distinct().ToArray();
                            for (var i = 0; i < tmp.Length; i++)
                            {
                                tmp[i] = string.Join("、", x.Where(y => y.Phenomenon + "，" + y.Solution == tmp[i]).Select(y => y.Lane)) + tmp[i];
                            }
                            <tr>
                                <td>@x.Key</td>
                                <td>@x.Count()</td>
                                <td>@x.Count(y => !y.IsSolved)</td>
                                <td>@x.Count(y => y.IsSolved)</td>
                                <td>@string.Join("；", tmp)</td>
                            </tr>
                        }
                        <tr>
                            <td>合计</td>
                            <td>@Model.Issues.Object.Count()</td>
                            <td>@Model.Issues.Object.Count(x => !x.IsSolved)</td>
                            <td>@Model.Issues.Object.Count(x => x.IsSolved)</td>
                            <td></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
            @*<div class="col-md-6">
                <h4>总览</h4>
                <div id="chartGeneral" class="ct-chart ct-perfect-fourth"></div>
            </div>
            <div class="col-md-3">
                <h4>已解决</h4>
                <div id="chartSolved" class="ct-chart ct-perfect-fourth"></div>
            </div>
            <div class="col-md-3">
                <h4>未解决</h4>
                <div id="chartUnsolved" class="ct-chart ct-perfect-fourth"></div>
            </div>*@
            <div id="chartGeneral" class="ct-chart ct-perfect-fourth"></div>
            <div>
                <div class="legend" style="text-align:center">
                    <i class="fa fa-circle text-info"></i> 维修前故障
                    <i class="fa fa-circle text-danger"></i> 维修后故障
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    @*Chartist.Pie('#chartSolved', @Html.Raw(ViewBag.SolvedStatistics));
    Chartist.Pie('#chartUnsolved', @Html.Raw(ViewBag.UnsolvedStatistics));*@

    var dataGeneral = @Html.Raw(ViewBag.GeneralStatistics);
        
    var options = {
        seriesBarDistance: 10,
        axisX: {
            showGrid: false
        },
        height: "215px"
    };
        
    var responsiveOptions = [
      ['screen and (max-width: 640px)', {
          seriesBarDistance: 5,
          axisX: {
              labelInterpolationFnc: function (value) {
                  return value[0];
              }
          }
      }]
    ];
        
    Chartist.Bar('#chartGeneral', dataGeneral, options, responsiveOptions);
</script>